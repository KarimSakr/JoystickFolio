//
//  RegistrationInteractor.swift
//  JoyStickFolio
//
//  Created by Karim Sakr on 14/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import FirebaseAuth
import FirebaseFirestore

protocol RegistrationBusinessLogic {
    
    var data: [String : String] { get set }
    
    var processes:[RegistrationModels.Request.RegistrationProcess] { get set }
    
    func isUsernameAvailble(username: String) async -> Bool
    
    func registerUser() async -> Single<Void>
    
    func fullNameEntered(fullName: String)
    
    func emailEntered(email: String)
    
    func usernameEntered(username: String)
    
    func passwordEntered(password: String)
    
    func isFullNameValid(textField: String) -> Bool
    
    func isEmailValid(textField: String) -> Bool
    
    func isUsernameValid(textField: String) -> Bool
    
    func isPasswordValid(textfield: String, repeatTextField: String) -> Bool
  
}

protocol RegistrationDataStore {
    
}

class RegistrationInteractor: RegistrationBusinessLogic, RegistrationDataStore {
  var presenter: RegistrationPresentationLogic?

    //MARK: - Managers
    private let authenticationManager = AuthenticationManager()
    private let databaseManager = DatabaseManager()
    
    private let db = Firestore.firestore()
    
    //MARK: - Auth Validator
    private let validator = AuthValidator()
    
    //MARK: - User Data
    var data: [String : String] = [:]
    
    var processes:[RegistrationModels.Request.RegistrationProcess] = [
        .init(title: "Well hello there! \nGot a name?", placeholder: "Full Name...", buttonTitle: "Next", process: .enterFullName),
        .init(title: "Nice to meet you! \nHow can we contact you?", placeholder: "Email...", buttonTitle: "Next", process: .enterEmail),
        .init(title: "How about a unique nickname?\nLike everybody else...", placeholder: "Username...", buttonTitle: "Next", process: .enterUsername),
        .init(title: "How about some privacy? \n No peeking... \nI promise :)", placeholder: "Confirm Password...", buttonTitle: "Submit", process: .enterPassword),
        .init(title: "Creating player...", placeholder: "", buttonTitle: "", process: .loading),
    ]
    
    func isUsernameAvailble(username: String) async -> Bool {
        return await databaseManager.isUsernameAvailable(username: username)
    }
    
    //MARK: - registerUser
    func registerUser() async -> Single<Void> {
        let newUser = RegistrationModels.Request.CreatedUserProfile(email   : data[Constants.Key.Auth.email]!,
                                                                    fullName: data[Constants.Key.Auth.fullName]!,
                                                                    username: data[Constants.Key.Auth.username]!)
        let password = data[Constants.Key.Auth.password]!
        
        do {
            try await Auth.auth()
                .createUser(withEmail: newUser.email, password: password)
            
            return Single.create { single in
                
                Task {
                    do {
                        try self.db
                            .collection(Constants.Firebase.FireStore.Collection.users)
                            .document(newUser.username)
                            .setData(from: newUser)
                        single(.success({}()))
                    } catch {
                        single(.failure(error))
                    }
                }
                
                return Disposables.create()
            }
            
        } catch {
            return Single.error(error)
        }
    }
    
    //MARK: - fullNameEntered
    func fullNameEntered(fullName: String) {
        data[Constants.Key.Auth.fullName] = fullName
    }
    
    //MARK: - emailEntered
    func emailEntered(email: String) {
        data[Constants.Key.Auth.email] = email
    }
    
    //MARK: - usernameEntered
    func usernameEntered(username: String) {
        data[Constants.Key.Auth.username] = username
    }
    
    //MARK: - passwordEnetred
    func passwordEntered(password: String) {
        data[Constants.Key.Auth.password] = password
    }
    
    //MARK: - Validators
    func isFullNameValid(textField: String) -> Bool {
        return validator.isFullNameValid(textField: textField)
    }
    
    func isEmailValid(textField: String) -> Bool {
        return validator.isEmailValid(textField: textField)
    }
    
    func isUsernameValid(textField: String) -> Bool {
        return validator.isUsernameValid(textField: textField)
    }
    
    func isPasswordValid(textfield: String, repeatTextField: String) -> Bool {
        return validator.isPasswordValid(textfield: textfield, repeatTextField: repeatTextField)
    }
}

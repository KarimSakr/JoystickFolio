//
//  RegistrationPresenter.swift
//  JoyStickFolio
//
//  Created by Karim Sakr on 14/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationPresentationLogic {
    
    func showError(with message: String)
    
    func fullNameEntered()
    
    func emailEntered()
    
    func addLoadingIndicator()
    
    func removeLoadingIndicator()
    
    func usernameEntered()
    
    func passwordEntered()
    
    func dismissRegistrationScreen()
    
    func resetRegistration(mainTextFieldPlaceholder: String, buttonSetTitle: String, titleLableText: String)
    
    func nextEntry(mainTextFieldPlaceholder: String, buttonSetTitle: String, titleLableText: String, progressValue: Float)
    
    func appendLetter(letter: Character)
}

class RegistrationPresenter: RegistrationPresentationLogic {
    weak var viewController: RegistrationDisplayLogic?
    
    func showError(with message: String) {
        guard let viewController = viewController else { return }
        viewController.showError(with: message)
    }
    
    func fullNameEntered() {
        guard let viewController = viewController else { return }
        let mainTextField = viewController.mainTextField
        DispatchQueue.main.async {
            mainTextField.textContentType = .emailAddress
            mainTextField.text = ""
        }
    }
    
    func emailEntered() {
        guard let viewController = viewController else { return }
        let mainTextField = viewController.mainTextField
        DispatchQueue.main.async {
            mainTextField.textContentType = .name
            mainTextField.text = ""
        }
    }
    
    func addLoadingIndicator() {
        guard let viewController = viewController else { return }
        let activityIndicator = viewController.activityIndicator
        // fix modal presentation
        
        DispatchQueue.main.async {
            activityIndicator.isHidden = false
            activityIndicator.startAnimating()
        }
    }
    
    func removeLoadingIndicator() {
        guard let viewController = viewController else { return }
        let activityIndicator = viewController.activityIndicator
        // fix modal presentation
        DispatchQueue.main.async {
            activityIndicator.stopAnimating()
            activityIndicator.isHidden = true
        }
    }
    
    func usernameEntered() {
        guard let viewController = viewController else { return }
        let mainTextField = viewController.mainTextField
        let secondTextField = viewController.secondTextField
        DispatchQueue.main.async {
            secondTextField.isHidden = false
            secondTextField.becomeFirstResponder()
            mainTextField.isSecureTextEntry = true
            mainTextField.text = ""
            self.removeLoadingIndicator()
            mainTextField.textContentType = .newPassword
        }
    }
    
    func passwordEntered() {
        guard let viewController = viewController else { return }
        let mainTextField = viewController.mainTextField
        let secondTextField = viewController.secondTextField
        let submitButton = viewController.submitButton
        let progressBarView = viewController.progressBarView
        
        DispatchQueue.main.async {
            // deselect textfields
            secondTextField.resignFirstResponder()
            mainTextField.resignFirstResponder()
            
            
            mainTextField.isSecureTextEntry = false
            mainTextField.text = ""
            secondTextField.text = ""
            
            
            // remove views
            mainTextField.isHidden       = true
            secondTextField.isHidden = true
            submitButton.isHidden    = true
            progressBarView.isHidden = true
            
            self.addLoadingIndicator()
        }
    }
    
    func dismissRegistrationScreen() {
        guard let viewController = viewController else { return }
        viewController.dismissRegistrationScreen()
    }
    
    func resetRegistration(mainTextFieldPlaceholder: String, buttonSetTitle: String, titleLableText: String) {
        
        guard let viewController = viewController else { return }
        removeLoadingIndicator()
        let mainTextField = viewController.mainTextField
        let submitButton = viewController.submitButton
        let progressBarView = viewController.progressBarView
        let titleLabel = viewController.titleLabel
        
        DispatchQueue.main.async {
            mainTextField.placeholder = mainTextFieldPlaceholder
            submitButton.setTitle(buttonSetTitle, for: .normal)
            titleLabel.text = titleLableText
            
            progressBarView.progress = Float(0)
            
            progressBarView.isHidden = false
            mainTextField.isHidden       = false
            submitButton.isHidden    = false
        }
    }
    
    func nextEntry(mainTextFieldPlaceholder: String, buttonSetTitle: String, titleLableText: String, progressValue: Float) {
        guard let viewController = viewController else { return }
        let mainTextField = viewController.mainTextField
        let submitButton = viewController.submitButton
        let progressBarView = viewController.progressBarView
        let titleLabel = viewController.titleLabel
        
        DispatchQueue.main.async {
            mainTextField.placeholder = mainTextFieldPlaceholder
            submitButton.setTitle(buttonSetTitle, for: .normal)
            
            progressBarView.progress = progressValue
            titleLabel.text? = ""
        }
    }
    
    func appendLetter(letter: Character) {
        guard let viewController = viewController else { return }
        let titleLabel = viewController.titleLabel
        DispatchQueue.main.async {
            titleLabel.text?.append(letter)
        }
    }
}

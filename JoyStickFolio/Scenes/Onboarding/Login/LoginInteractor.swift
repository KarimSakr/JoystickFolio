//
//  LoginInteractor.swift
//  JoyStickFolio
//
//  Created by Karim Sakr on 11/03/2024.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseAuth
import RxSwift
import AppTrackingTransparency

protocol LoginBusinessLogic {
    
    func checkifUserIsSignedIn() -> Bool
    
    func login(usernameEmail: String, password: String) async
    
}

protocol LoginDataStore {
    
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    var presenter: LoginPresentationLogic?
    
    private let bag = DisposeBag()
    
    //MARK: - Managers
    private let authManager = AuthenticationManager()
    
    func login(usernameEmail: String, password: String) async {
        
        await authManager.signIn(usernameEmail: usernameEmail, password: password)
            .subscribe { [weak self] authDataResult in
                guard let self = self else { return }
                guard let presenter = presenter else { return }
                requestIDFA()
                AnalyticsManager.logEvent(event: .login)
                DispatchQueue.main.async {
                    presenter.stopLoading()
                    presenter.dismissLoginScreen()
                }
            } onFailure: { [weak self] error in
                guard let self = self else { return }
                guard let presenter = presenter else { return }
                DispatchQueue.main.async {
                    presenter.stopLoading()
                    presenter.showSnackbar(with: error.localizedDescription)
                }
            }
            .disposed(by: bag)
    }
    
    func checkifUserIsSignedIn() -> Bool {
        
        if Auth.auth().currentUser == nil {
            return false
        }
        return true
    }
    
    private func requestIDFA() {
        if #available(iOS 14, *) {
            ATTrackingManager.requestTrackingAuthorization { status in
                switch status {
                case .authorized, .denied, .notDetermined, .restricted: break
                @unknown default: break
                }
            }
        }
    }
}
